#!/bin/bash
set -euo pipefail; IFS=$'\n\t'

# Enable verbose mode
set -x

case $(uname -p) in
  "x86_64")
    PROCESSOR="amd64"
    ;;
  "aarch64")
    PROCESSOR="arm64"
    ;;
esac

#
# Install ec2-instance-connect and SSMAgent
# Reference: https://docs.aws.amazon.com/systems-manager/latest/userguide/agent-install-al2.html
#
dnf install -y ec2-instance-connect
dnf install -y "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_$${PROCESSOR}/amazon-ssm-agent.rpm"

#
# 기본 유틸리티들 설치
#
dnf autoremove -y postfix
# - ripgrep: Disabled temporarily (https://github.com/femiwiki/femiwiki/issues/247)
dnf install -y \
  bash-completion \
  vim-enhanced \
  htop \
  tmux \
  git \
  jq \
  unzip \
  nc \
  bind-utils \
;

#
# Install atop and sysstat
# Reference: https://repost.aws/knowledge-center/ec2-linux-configure-monitoring-tools
#
dnf -y install sysstat atop
sed -i 's/^LOGINTERVAL=600.*/LOGINTERVAL=60/' /etc/sysconfig/atop
mkdir -v /etc/systemd/system/sysstat-collect.timer.d/
bash -c "sed -e 's|every 10 minutes|every 1 minute|g' -e '/^OnCalendar=/ s|/10$|/1|' /usr/lib/systemd/system/sysstat-collect.timer > /etc/systemd/system/sysstat-collect.timer.d/override.conf"
sed -i 's|^SADC_OPTIONS=.*|SADC_OPTIONS=" -S XALL"|' /etc/sysconfig/sysstat
systemctl enable atop.service sysstat-collect.timer sysstat.service
systemctl restart atop.service sysstat-collect.timer sysstat.service

#
# Install and configure Grafana Alloy
#
curl -sLo gpg.key https://rpm.grafana.com/gpg.key
rpm --import gpg.key && rm gpg.key
echo -e '[grafana]\nname=grafana\nbaseurl=https://rpm.grafana.com\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.grafana.com/gpg.key\nsslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt' | tee /etc/yum.repos.d/grafana.repo
dnf install -y alloy
cat <<'EOF' > /etc/alloy/config.alloy
${alloy_config}
EOF
systemctl enable --now alloy

#
# sudo 로 /usr/local/{bin,sbin} 안에 있는 커맨드를 실행할 수 있도록 설정
#
cat <<'EOF' > /etc/sudoers.d/10-sudo-path
Defaults secure_path=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
EOF

#
# 도커 설치
# Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker
#
dnf install -y docker
systemctl enable docker
systemctl start docker
usermod -a -G docker ec2-user
usermod -a -G docker alloy
cat << EOF >> /etc/docker/daemon.json
{
  "log-driver": "journald"
}
EOF

# Add hostname to /etc/hosts
# https://github.com/hashicorp/nomad/blob/v1.8.4/terraform/shared/scripts/server.sh
echo "127.0.0.1 $(hostname)" | tee --append /etc/hosts

#
# htoprc 생성
#
sudo -u ec2-user mkdir -p /home/ec2-user/.config/htop
sudo -u ec2-user tee /home/ec2-user/.config/htop/htoprc <<'EOF' >/dev/null
header_margin=1
hide_kernel_threads=1
hide_userland_threads=1
highlight_base_name=1
highlight_megabytes=1
tree_view=1
EOF

#
# README 생성
#
sudo -u ec2-user tee /home/ec2-user/README <<'EOF' >/dev/null
https://github.com/femiwiki/infra
EOF

# Launch Memcached
docker run \
  --name memcached \
  -detach \
  --network=host \
  memcached:1.6.23-alpine memcached

# Launch MySQL
mkdir -p /srv/
mount /dev/nvme1n1 /srv/mysql
mkdir -p /etc/mysql/
curl -sL https://github.com/femiwiki/nomad/raw/main/mysql/my.cnf -o /etc/mysql/my.cnf
docker run \
  --name mysql \
  --detach \
  -v /srv/mysql/:/srv/mysql/ \
  -v /etc/mysql/:/etc/mysql/ \
  -e MYSQL_RANDOM_ROOT_PASSWORD=yes \
  --network=host \
  mysql/mysql-server:8.0.32

# Launch Fastcgi
mkdir /a/
chown ec2-user:ec2-user /a/
aws s3 cp s3://femiwiki-secrets/secrets.php /a/
aws s3 cp s3://femiwiki-secrets/analytics-credentials-file.json /a/
mkdir -p /usr/local/etc/php/conf.d/
curl -sL https://github.com/femiwiki/nomad/raw/main/php/opcache-recommended.ini -o /usr/local/etc/php/conf.d/opcache-recommended.ini
mkdir -p /usr/local/etc/php/
curl -sL https://github.com/femiwiki/nomad/raw/main/php/php.ini -o /usr/local/etc/php/php.ini
mkdir -p /usr/local/etc/
curl -sL https://github.com/femiwiki/nomad/raw/main/php/php-fpm.conf -o /usr/local/etc/php-fpm.conf

mkdir -p /srv/femiwiki.com/sitemap
mkdir -p /tmp/cache
chown -R 33:33 /tmp/cache

cat <<EOF > /a/Hotfix.php
<?php
/**
 * Use this file for hotfixes
 *
 * @file
 */

\$wgAutoConfirmAge = 3600;
\$wgUnifiedExtensionForFemiwikiBlockByEmail = false;
\$wgUnifiedExtensionForFemiwikiRelatedArticlesUseLinks = false;

foreach ( [
	NS_TALK,
	NS_USER_TALK,
	NS_PROJECT_TALK,
	NS_FILE_TALK,
	NS_MEDIAWIKI_TALK,
	NS_TEMPLATE_TALK,
	NS_HELP_TALK,
	NS_CATEGORY_TALK,
	NS_ITEM_TALK,
	NS_PROPERTY_TALK,
	NS_WIDGET_TALK,
	NS_MODULE_TALK,
	NS_TRANSLATIONS_TALK,
	NS_GADGET_TALK,
	NS_GADGET_DEFINITION_TALK,
	NS_NEWSLETTER_TALK,
	NS_BBS,
	NS_BBS_TALK,
] as \$space ) {
	\$wgNamespaceContentModels[\$space] = CONTENT_MODEL_WIKITEXT;
}

// Maintenance
// 점검이 끝나면 아래 라인 주석처리한 뒤, 아래 문서 내용을 비우면 됨
// https://femiwiki.com/w/%EB%AF%B8%EB%94%94%EC%96%B4%EC%9C%84%ED%82%A4:Sitenotice
// \$wgReadOnly = '데이터베이스 업그레이드 작업이 진행 중입니다. 작업이 진행되는 동안 사이트 이용이 제한됩니다.';

// 업로드를 막고싶을때엔 아래 라인 주석 해제하면 됨
// \$wgEnableUploads = false;
EOF

DOCKER_IMAGE=ghcr.io/femiwiki/femiwiki:2025-05-20t16-56-0159a394
MYSQL_PWD="$(docker run --rm -v /a/:/a/ php -r 'require "/a/secrets.php"; echo $wgDBpassword;')"
docker pull $DOCKER_IMAGE
docker rm -f fastcgi
docker run \
  --name fastcgi \
  --detach \
  -v /a/secrets.php:/a/secrets.php \
  -v /a/Hotfix.php:/a/Hotfix.php \
  -v /a/analytics-credentials-file.json:/a/analytics-credentials-file.json \
  -v /usr/local/etc/php/conf.d/opcache-recommended.ini:/usr/local/etc/php/conf.d/opcache-recommended.ini \
  -v /usr/local/etc/php/php.ini:/usr/local/etc/php/php.ini \
  -v /usr/local/etc/php-fpm.conf:/usr/local/etc/php-fpm.conf \
  -v /tmp/cache:/tmp/cache \
  -e MEDIAWIKI_SKIP_INSTALL=1 \
  -e MEDIAWIKI_SKIP_IMPORT_SITES=1 \
  -e MEDIAWIKI_SKIP_UPDATE=1 \
  -e WG_DB_SERVER=127.0.0.1:3306 \
  -e WG_DB_USER=root \
  -e WG_DB_PASSWORD="$MYSQL_PWD" \
  -e NOMAD_UPSTREAM_ADDR_memcached=127.0.0.1:11211 \
  --network=host \
  $DOCKER_IMAGE

# Launch Caddy
mkdir -p /srv/femiwiki.com/sitemap
curl -sL https://github.com/femiwiki/nomad/raw/main/caddy/Caddyfile -o /srv/femiwiki.com/Caddyfile
curl -sL https://github.com/femiwiki/nomad/raw/main/res/robots.txt -o /srv/femiwiki.com/robots.txt
docker run \
  --name http \
  --detach \
  -v /srv/femiwiki.com/Caddyfile:/srv/femiwiki.com/Caddyfile \
  -v /srv/femiwiki.com/robots.txt:/srv/femiwiki.com/robots.txt \
  -v /srv/femiwiki.com/sitemap:/srv/femiwiki.com/sitemap \
  -e FASTCGI_ADDR=127.0.0.1:9000 \
  -e AWS_REGION=ap-northeast-1 \
  -e S3_USE_IAM_PROVIDER=true \
  -e S3_HOST=s3.ap-northeast-1.amazonaws.com \
  -e S3_BUCKET=femiwiki-secrets \
  -e S3_PREFIX=caddycerts \
  --network=host \
  --entrypoint caddy \
  ghcr.io/femiwiki/femiwiki:2025-04-23T15-03-0bb0acf0 \
  run

# Setup backupbot
dnf install -y cronie
systemctl enable --now crond
cat <<EOF > backupbot.crontab
0 6 * * * docker run --rm -v /a/:/a/ -e LOCAL_SETTINGS=/a/secrets.php -e WG_DB_SERVER=127.0.0.1 -e WG_DB_USER=root --network=host ghcr.io/femiwiki/backupbot:2025-05-19T12-11-9aa37a1a 2>&1
EOF
crontab backupbot.crontab
rm backupbot.crontab
